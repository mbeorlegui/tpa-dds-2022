@startuml TPA-3-Simplificado

class Organizacion {
  razonSocial : String
  tipoOrganizacion : TipoOrganizacion
  ubicacion : Ubicacion
  sectores : List<Sector>
  clasificacion : Clasificacion
  mediciones : List<Medicion>
  contactos : List<Contacto>
  mediosDeComunicacion : List<MediosDeComunicacion>
  boolean contieneMedicionIdentica(Medicion)
  Set<Trayecto> getTrayectos()
  double huellaDeCarbonoEnPeriodo(Periodicidad, String periodoDeImputacion, UnidadEquivalenteCarbono)
  double impactoMiembroSobreHC(Miembro, Periodicidad, String periodoDeImputacion, UnidadEquivalenteCarbono)
  double indiceSectorSobreHC(Sector, Periodicidad, String periodoDeImputacion, UnidadEquivalenteCarbono)
  void enviarGuiaDeRecomendaciones(String link)
}
' impactoMiembroSobreHC -> llamo a huellaDeCarbonoEnPeriodo, y calcularHuellaDeCarbono de Miembro,
' y divido el resultado para obtener el porcentaje 
' verificarQueSeanMiembros -> valida que en la lista de miembros todos pertenezcan a la organizacion
' asignarTrayectoA -> llama a verificarQueSeanMiembros para lista de miembros,
' y verificarQuePuedaSerAsignadoAMiembros para el trayecto, si pasan las validaciones,
' a todos los miembros de la lista se le asigna el trayecto

class Contacto {
  nombre : String
  eMail : String
  numeroDeWhatsapp : Integer
}

class Organizaciones <<(S,#FF7700) Singleton>> {
  organizaciones : List<Organizacion>
  void enviarGuiaDeRecomendaciones(String link)
}

Organizacion -right->"*" Contacto
Organizaciones -->"*" Organizacion
Organizaciones -right->"*" MediosDeComunicacion

interface MediosDeComunicacion {
  void enviarNotificacion(String link) 
}


MediosDeComunicacion <|-up- WhatsApp
MediosDeComunicacion <|-up- Email

class SectorTerritorial {
  organizaciones : List<Organizacion>
}

SectorTerritorial -left->"*" Organizacion

class TiposConsumos <<(S,#FF7700) Singleton>> {
  consumos : List<TipoConsumo>
}

' TiposConsumos es singleton (repositorio de objetos)
TiposConsumos -left->"*" TipoConsumo

class TipoConsumo {
  actividad : Actividad
  alcance : Alcance
  unidad : Unidad
  factorDeEmision : FactorDeEmision
  nombre : String
  double calcularHuellaDeCarbono(double medicion, UnidadEquivalenteCarbono)
}
' void setFactorDeEmision(double)

class FactorDeEmision {
  factor : Double
  unidadEquivalenteCarbono : UnidadEquivalenteCarbono
  Double getFactor(UnidadEquivalenteCarbono)
}

class Medicion {
  tipoConsumo: TipoConsumo
  valor: Integer
  periodicidad: Periodicidad
  periodoDeImputacion: String
  double huellaDeCarbono()
}

class Ubicacion {
  localidadId : Integer
  calle : String
  altura : String
}

class Sector {
  miembros : List<Miembro>
  double calcularHuellaDeCarbono(Periodicidad, UnidadEquivalenteCarbono)
}

class Miembro {
  nombre : String
  apellido : String
  numeroDeDocumento : Integer
  tipoDeDocumento : Documento
  trayecto : Trayecto
  double calcularHuellaDeCarbono(Periodicidad, UnidadEquivalenteCarbono)
}

' Usamos strategy para los medios de transportes
abstract Transporte {
  combustible : TipoConsumo
  combustiblePorKm : Double
  tipoTransporte : TipoTransporte
  calculadoraDeDistancia : CalculadoraDeDistancia
  void verificarParadas(Ubicacion, Ubicacion)
  double calcularDistancia(Ubicacion, Ubicacion)
  double huellaDeCarbonoDeDistancia(double, UnidadEquivalenteCarbono)
}


class VehiculoParticular {
  tipoDeVehiculo : TipoDeVehiculo
}

class TransportePublico {
  tipoDeTransportePublico : TipoDeTransportePublico
  paradas : List<Parada>
  linea : String
  bool tieneUnaParadaEn(Ubicacion)
  void agregarParadaInicial(Parada)
  void agregarParadaLuegoDe(Parada, Ubicacion)
  void agregarParadaFinal(Parada, Ubicacion, ResultadoDistancia)
  void validarDistancia(Parada, Ubicacion)
  boolean tieneUnaParadaEn(Ubicacion)
  double calcularDistancia(Ubicacion, Ubicacion)
}

class ServicioContratado {
  tipoDeServicioContratado : TipoDeServicioContratado
}

' Se refiere a caminar o a bicicleta
class Pie {

}

class Bicicleta {

}


class Tramo {
  origenDeTramo : Ubicacion
  destinoDeTramo : Ubicacion
  transporteUtilizado : Transporte
  boolean puedeSerCompartido()
  double distanciaIntermedia()
  double huellaDeCarbono(UnidadEquivalenteCarbono)
}
' puedeSerCompartido -> valida que el tipo de transporte del tramo sea
' vehiculo particular o de servicio contratado

class Trayecto {
  tramos : List<Tramo>
  void verificarQuePuedaSerAsignadoAMiembros()
  double distanciaTotal()
  boolean tramosPuedenSerCompartidos()
  double huellaDeCarbonoEnPeriodo(Periodicidad, UnidadEquivalenteCarbono)
  double hcTramos(UnidadEquivalenteCarbono)
}
' verificarQuePuedaSerAsignadoAMiembros -> llama para cada tramo al validarTramoCompartido

interface CalculadoraDeDistancia {
  double distancia(Ubicacion origen, Ubicacion destino)
}

class CalculadoraDeDistanciaRetrofit {

}

class ResultadoDistancia {
  double : valor
  Unidad : unidad
  double obtenerKilometros()
}

class Parada {
  Ubicacion ubicacion
  ResultadoDistancia distanciaSiguienteParada
  void modificarDistanciaSiguienteParada(Parada)
}

class Administrador {
  user : String
  password : String
  validador : PasswordValidator 
  void generarNuevoFactorDeEmision(Actividad, Alcance, Unidad, FactorDeEmision, String nombreTipoDeConsumo)
}

class PasswordValidator {
  List<Validator> : validadores
  void validarPassword(password, user)
  void ejecutarValidaciones()
}


abstract class Validator {
  password : String
  user : String
  abstract void ejecutarValidacion()
}

class CsvHandler {
  List<Medicion> getMediciones()
}

CsvHandler --> Medicion

Administrador .left.> TiposConsumos
Administrador -down->"1" PasswordValidator
PasswordValidator --> "9" Validator


Miembro "*"<-up- Sector
Organizacion -down-> Ubicacion
Organizacion -up->"*" Sector
Miembro -up-> Documento

Trayecto --> "*" Tramo
Trayecto <-left- Miembro
Tramo --> Transporte
Tramo -right-> Ubicacion
Tramo -right-> Ubicacion

TransportePublico -left->"*" Parada
TransportePublico -up-|> Transporte
VehiculoParticular -up-|> Transporte
Pie -up-|> Transporte
Bicicleta -up-|> Transporte
ServicioContratado -up-|> Transporte

Transporte -up-> TipoConsumo
TipoConsumo -down-> FactorDeEmision

Organizacion ..> Trayecto
Tramo --> CalculadoraDeDistancia
CalculadoraDeDistanciaRetrofit .down.|> CalculadoraDeDistancia

Organizacion -down->"*" Medicion
Medicion --> TipoConsumo
Medicion -right-> Periodicidad

Parada -left-> ResultadoDistancia
Parada -up-> Ubicacion

note top of Organizaciones
  Ejecuta el envio de notificaciones de lunes a viernes a las 17hs con crontab
end note

@enduml