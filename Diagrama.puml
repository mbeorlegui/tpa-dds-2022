@startuml TPA-2

class Organizacion {
  razonSocial : String
  tipo : Tipo
  ubicacion : Ubicacion
  sectores : List<Sector>
  clasificacion : Clasificacion
  csvHandler : CSVHandler
  bool tieneSectorDe(Sector)
  int cantidadDeSectores()
  int cantidadDeMiembros()
  bool esMiembro(Miembro miembro)
  List<Miembro> miembros()
  void validarMiembrosOrg(List<Miembro>)
  void asignarTrayectoAMiembros(Trayecto, List<Miembro>)
  void cargarMedicion(Integer, Periodicidad, String)
}
' validarMiembrosOrg -> valida que en la lista de miembros todos pertenezcan a la organizacion
' asignarTrayectoAMiembros -> llama a validarMiembrosOrg para lista de miembros,
' y validarTrayectoCompartidoMiembrosOrg para el trayecto, si pasan las validaciones,
' a todos los miembros de la lista se le asigna el trayecto

class TipoConsumo {
  nombre : String
  unidad : Unidad
  actividad : Actividad
  alcance : Alcance
}

class Medicion {
  tipoConsumo: TipoConsumo
  valor: Integer
  periodicidad: Periodicidad
  periodoDeImputacion: String
}
' periodicidad puede ser un String. Solo se usa en la validacion con periodoDeImputacion

enum Unidad {
  M3,
  LT,
  KG,
  KWH,
  KM,
}

enum Actividad {
  CombustionFija,
  CombustionMóvil,
  Electricidad,
  Logística,
}

enum Alcance {
  EmisionDirecta,
  EmisionIndirecta,
  OtrasEmisiones,
}

enum Periodicidad {
  MENSUAL,
  ANUAL,
}
class Ubicacion {
  localidadId : integer
  calle : string
  altura : string
}

class Sector {
  miembros : List<Miembro>
}

class Miembro {
  nombre : String
  apellido : String
  nroDocumento : int
  tipoDocumento : Documento
  trayecto : Trayecto
}

enum Documento {
  DNI,
  LIBRETA,
}

enum Tipo {
  GUBERNAMENTAL,
  ONG,
  EMPRESA,
  INSTITUCION,
}

enum Clasificacion {
  MINISTERIO,
  UNIVERSIDAD,
  ESCUELA,
  EMPRESA_DEL_SECTOR_PRIMARIO,
  EMPRESA_DEL_SECTOR_SECUNDARIO,
}

' Usamos strategy para los medios de transportes
interface Transporte {
  tipoTransporte : TipoTransporte
}

enum TipoTransporte {
  PUBLICO,
  PARTICULAR,
  CONTRATADO,
  BICICLETA,
  PIE,
}

class VehiculoParticular {
  tipoDeVehiculo : TipoDeVehiculo
  combustible : Combustible
}

class TransportePublico {
  tipoDeTransportePublico : TipoDeTransportePublico
  paradas : List<Ubicacion>
  linea : String
  bool tieneUnaParadaEn(Ubicacion)
}

class ServicioContratado {
  tipoDeServicioContratado : TipoDeServicioContratado
}

' Se refiere a caminar o a bicicleta
class Pie {

}

class Bicicleta {

}


enum TipoDeTransportePublico {
  SUBTE,
  TREN,
  COLECTIVO,
}

enum TipoDeVehiculo {
  AUTO,
  MOTO,
  CAMIONETA,
}

enum TipoDeServicioContratado{
  TAXI,
  REMIS,
}

enum Combustible {
  GNC,
  NAFTA,
  ELECTRICO,
  GASOIL,
}

class Tramo {
  origenDeTramo : Ubicacion
  destinoDeTramo : Ubicacion
  transporteUtilizado : Transporte
  void validarTramoCompartidoMiembrosOrg()
  double distanciaIntermedia()
}
' validarTramoCompartidoMiembrosOrg -> valida que el tipo de transporte del tramo sea
' vehículo particular o de servicio contratado

class Trayecto {
  tramos : List<Tramo>
  void validarTrayectoCompartidoMiembrosOrg()
  double distanciaTotal()
}
' validarTrayectoCompartidoMiembrosOrg -> llama para cada tramo al validarTramoCompartido

interface CalculadoraDeDistancia {
  double distancia(Ubicacion origen, Ubicacion destino)
}

class Administrador {
  user : String
  password : String
  validador : PasswordValidator 
}

class PasswordValidator {
  List<Validator> : validadores
  bool passwordEsComun(password)
  void validarPassword(password, user)
  void ejecutarValidaciones()
}

class FileHandler {
  void openFile()
  bool palabraEstaEnArchivo(unaPalabra)
}

abstract class Validator {
  password : String
  user : String
  abstract void ejecutarValidacion()
}

class PasswordMatchesInvalidCharactersValidator {
  void ejecutarValidacion()
}

class PasswordIsCommonValidator {
  fileReader : FileHandler
  void ejecutarValidacion()
}

class PasswordHasOnlyLettersValidator {
  void ejecutarValidacion()
}

class PasswordContainsUserValidator {
  void ejecutarValidacion()
}


class PasswordHasOnlyNumbersAndLettersValidator {
  void ejecutarValidacion()
}

class PasswordHasOnlyNumbersValidator {
  void ejecutarValidacion()
}

class PasswordMaxLengthValidator {
  void ejecutarValidacion()
}

class PasswordMinLengthValidator {
  void ejecutarValidacion()
}

class PasswordNullValidator {
  void ejecutarValidacion()
}

class CSVHandler {
  void agregarMedicion()
}


Administrador -down->"1" PasswordValidator
PasswordValidator --> "9" Validator
Validator <|-down- PasswordIsCommonValidator
PasswordIsCommonValidator -down->"1" FileHandler
Validator <|-down- PasswordHasOnlyLettersValidator
Validator <|-down- PasswordContainsUserValidator
Validator <|-down- PasswordHasOnlyNumbersAndLettersValidator
Validator <|-left- PasswordHasOnlyNumbersValidator
Validator <|-right- PasswordMaxLengthValidator
Validator <|-left- PasswordMinLengthValidator
Validator <|-right- PasswordNullValidator
Validator <|-down- PasswordMatchesInvalidCharactersValidator


Miembro "*"<-up- Sector
Organizacion -up-> Tipo
Organizacion -up-> Clasificacion
Organizacion --> Ubicacion
Organizacion -left->"*" Sector
Miembro -up-> Documento

Trayecto --> "*" Tramo
Trayecto <-left- Miembro
Tramo --> Transporte
Tramo -->"2" Ubicacion

Transporte -up-> TipoTransporte
TransportePublico -up->"*" Ubicacion
TransportePublico --> TipoDeTransportePublico
VehiculoParticular -down-> TipoDeVehiculo
VehiculoParticular -up-> Combustible
ServicioContratado -down-> TipoDeServicioContratado
TransportePublico .up.|> Transporte
VehiculoParticular .up.|> Transporte
Pie .up.|> Transporte
Bicicleta .up.|> Transporte
ServicioContratado .up.|> Transporte


Organizacion ..> Trayecto
Tramo ..> CalculadoraDeDistancia

Organizacion -right-> CSVHandler

TipoConsumo --> Actividad
TipoConsumo --> Alcance
TipoConsumo --> Unidad

@enduml