@startuml TPA-3

class Organizacion {
  razonSocial : String
  tipoOrganizacion : TipoOrganizacion
  ubicacion : Ubicacion
  sectores : List<Sector>
  clasificacion : Clasificacion
  mediciones : List<Medicion>
  contactos : List<Contacto>
  mediosDeComunicacion : List<MediosDeComunicacion>
  bool tieneSectorDe(Sector)
  int cantidadDeSectores()
  int cantidadDeMiembros()
  bool esMiembro(Miembro miembro)
  List<Miembro> getMiembros()
  void verificarQueSeanMiembros(Miembro[])
  void asignarTrayectoA(Trayecto, List<Miembro>)
  void agregarMediciones()
  void agregarContacto(Contacto)
  boolean contieneMedicionIdentica(Medicion)
  Set<Trayecto> getTrayectos()
  double huellaDeCarbonoEnPeriodo(Periodicidad, String periodoDeImputacion, UnidadEquivalenteCarbono)
  double hcTrayectosMiembros(Periodicidad, UnidadEquivalenteCarbono)
  double hcMedicionesEnPeriodo(Periodicidad periodicidad, String periodoDeImputacion, UnidadEquivalenteCarbono)
  double impactoMiembroSobreHC(Miembro, Periodicidad, String periodoDeImputacion, UnidadEquivalenteCarbono)
  double indiceSectorSobreHC(Sector, Periodicidad, String periodoDeImputacion, UnidadEquivalenteCarbono)
  boolean tieneMenorHcQue(Organizacion, Periodicidad, String periodo, UnidadEquivalenteCarbono)
  void enviarGuiaDeRecomendaciones(String link)
}
' impactoMiembroSobreHC -> llamo a huellaDeCarbonoEnPeriodo, y calcularHuellaDeCarbono de Miembro, y divido el resultado para obtener el porcentaje 
' verificarQueSeanMiembros -> valida que en la lista de miembros todos pertenezcan a la organizacion
' asignarTrayectoA -> llama a verificarQueSeanMiembros para lista de miembros,
' y verificarQuePuedaSerAsignadoAMiembros para el trayecto, si pasan las validaciones,
' a todos los miembros de la lista se le asigna el trayecto

class Contacto {
  nombre : String
  eMail : String
  numeroDeWhatsapp : Integer
}

class Organizaciones <<(S,#FF7700) Singleton>> {
  organizaciones : List<Organizacion>
  void enviarGuiaDeRecomendaciones(String link)
}
' Singleton

Organizacion -up->"*" Contacto
Organizaciones -->"*" Organizacion
Organizaciones -up->"*" MediosDeComunicacion

interface MediosDeComunicacion {
  void enviarNotificacion(String link) 
  ' Se ejecuta con tarea programada
}

class WhatsApp {
  
}

class Email {
  
}

MediosDeComunicacion <|-up- WhatsApp
MediosDeComunicacion <|-up- Email

class SectorTerritorial {
  organizaciones : List<Organizacion>
  double huellaDeCarbonoEnPeriodo(Periodicidad, String periodoDeImputacion, UnidadEquivalenteCarbono)
}

SectorTerritorial -->"*" Organizacion

class TiposConsumos <<(S,#FF7700) Singleton>> {
  consumos : List<TipoConsumo>
}

' TiposConsumos.getInstance().getConsumos().get(0)
' TipoConsumo gasNatural = new TipoConsumo(
'   Actividad.COMBUSTION_FIJA,
'   Alcance.EMISION_DIRECTA,
'   Unidad.M3,
'   500
' );

' TiposConsumos es singleton (repositorio de objetos)
TiposConsumos -left->"*" TipoConsumo
TipoConsumo --> Actividad
TipoConsumo --> Alcance
TipoConsumo --> Unidad
TipoConsumo --> FactorDeEmision
FactorDeEmision --> UnidadEquivalenteCarbono


class TipoConsumo {
  actividad : Actividad
  alcance : Alcance
  unidad : Unidad
  factorDeEmision : FactorDeEmision
  nombre : String
  double calcularHuellaDeCarbono(double medicion, UnidadEquivalenteCarbono)
}

enum Actividad {
  COMBUSTION_FIJA,
  COMBUSTION_MOVIL,
  ELECTRICIDAD,
  LOGISTICA,
}

enum Alcance {
  EMISIONES_DIRECTAS,
  EMISIONES_INDIRECTAS,
  OTRAS_EMISIONES,
}

enum Unidad {
  M3,
  LT,
  KGS,
  LTS,
  KWH,
  KM,
  SIN_UNIDAD,
}

class FactorDeEmision {
  factor : Double
  unidadEquivalenteCarbono : UnidadEquivalenteCarbono
  Double getFactor(UnidadEquivalenteCarbono)
}

enum UnidadEquivalenteCarbono {
  GRAMO,
  KILOGRAMO,
  TONELADA;
  Double equivalenciaA(Double factor, UnidadEquivalenteCarbono)
}



class Medicion {
  tipoConsumo: TipoConsumo
  valor: Integer
  periodicidad: Periodicidad
  periodoDeImputacion: String
  double huellaDeCarbono(UnidadEquivalenteCarbono)
}


enum Periodicidad {
  MENSUAL,
  ANUAL,
}
class Ubicacion {
  localidadId : Integer
  calle : String
  altura : String
}

class Sector {
  miembros : List<Miembro>
  double calcularHuellaDeCarbono(Periodicidad, UnidadEquivalenteCarbono)
}

class Miembro {
  nombre : String
  apellido : String
  numeroDeDocumento : Integer
  tipoDeDocumento : Documento
  trayecto : Trayecto
  double calcularHuellaDeCarbono(Periodicidad,UnidadEquivalenteCarbono)
}

enum Documento {
  DNI,
  LIBRETA,
}

enum TipoOrganizacion {
  GUBERNAMENTAL,
  ONG,
  EMPRESA,
  INSTITUCION,
}

enum Clasificacion {
  MINISTERIO,
  UNIVERSIDAD,
  ESCUELA,
  EMPRESA_DEL_SECTOR_PRIMARIO,
  EMPRESA_DEL_SECTOR_SECUNDARIO,
}

' Usamos strategy para los medios de transportes
abstract Transporte {
  combustible : TipoConsumo
  combustiblePorKm : Double
  tipoTransporte : TipoTransporte
  calculadoraDeDistancia : CalculadoraDeDistancia
  void verificarParadas(Ubicacion, Ubicacion)
  double calcularDistancia(Ubicacion, Ubicacion)
  double huellaDeCarbonoDeDistancia(double, UnidadEquivalenteCarbono)
}

enum TipoTransporte {
  PUBLICO,
  PARTICULAR,
  CONTRATADO,
  BICICLETA,
  PIE,
}

class VehiculoParticular {
  tipoDeVehiculo : TipoDeVehiculo
}

class TransportePublico {
  tipoDeTransportePublico : TipoDeTransportePublico
  paradas : List<Parada>
  linea : String
  bool tieneUnaParadaEn(Ubicacion)
  void agregarParadaInicial(Parada)
  void agregarParadaLuegoDe(Parada, Ubicacion)
  void agregarParadaFinal(Parada, Ubicacion, ResultadoDistancia)
  void validarDistancia(Parada, Ubicacion)
  boolean tieneUnaParadaEn(Ubicacion)
  double calcularDistancia(Ubicacion, Ubicacion)
}

class ServicioContratado {
  tipoDeServicioContratado : TipoDeServicioContratado
}

' Se refiere a caminar o a bicicleta
class Pie {

}

class Bicicleta {

}


enum TipoDeTransportePublico {
  SUBTE,
  TREN,
  COLECTIVO,
}

enum TipoDeVehiculo {
  AUTO,
  MOTO,
  CAMIONETA,
}

enum TipoDeServicioContratado{
  TAXI,
  REMIS,
}

class Tramo {
  origenDeTramo : Ubicacion
  destinoDeTramo : Ubicacion
  transporteUtilizado : Transporte
  boolean puedeSerCompartido()
  double distanciaIntermedia()
  double huellaDeCarbono(UnidadEquivalenteCarbono)
}
' puedeSerCompartido -> valida que el tipo de transporte del tramo sea
' vehiculo particular o de servicio contratado

class Trayecto {
  tramos : List<Tramo>
  void verificarQuePuedaSerAsignadoAMiembros()
  double distanciaTotal()
  boolean tramosPuedenSerCompartidos()
  double huellaDeCarbonoEnPeriodo(Periodicidad, UnidadEquivalenteCarbono)
  double hcTramos(UnidadEquivalenteCarbono)
}
' verificarQuePuedaSerAsignadoAMiembros -> llama para cada tramo al validarTramoCompartido

interface CalculadoraDeDistancia {
  double distancia(Ubicacion origen, Ubicacion destino)
}

class CalculadoraDeDistanciaRetrofit {

}

class ResultadoDistancia {
  double : valor
  Unidad : unidad
  double obtenerKilometros()
}

class Parada {
  Ubicacion ubicacion
  ResultadoDistancia distanciaSiguienteParada
  void modificarDistanciaSiguienteParada(Parada)
}

class Administrador {
  user : String
  password : String
  validador : PasswordValidator 
  void generarNuevoFactorDeEmision(Actividad, Alcance, Unidad, FactorDeEmision, String nombreTipoDeConsumo)
}

class PasswordValidator {
  List<Validator> : validadores
  void validarPassword(password, user)
  void ejecutarValidaciones()
}

class FileHandler {
  bool palabraEstaEnArchivo(unaPalabra)
}

abstract class Validator {
  password : String
  user : String
  abstract void ejecutarValidacion()
}

class PasswordMatchesInvalidCharactersValidator {
  void ejecutarValidacion()
}

class PasswordIsCommonValidator {
  fileReader : FileHandler
  void ejecutarValidacion()
}

class PasswordHasOnlyLettersValidator {
  void ejecutarValidacion()
}

class PasswordContainsUserValidator {
  void ejecutarValidacion()
}


class PasswordHasOnlyNumbersAndLettersValidator {
  void ejecutarValidacion()
}

class PasswordHasOnlyNumbersValidator {
  void ejecutarValidacion()
}

class PasswordMaxLengthValidator {
  void ejecutarValidacion()
}

class PasswordMinLengthValidator {
  void ejecutarValidacion()
}

class PasswordNullValidator {
  void ejecutarValidacion()
}

class CsvHandler {
  List<Medicion> getMediciones()
}

CsvHandler --> Medicion

Administrador .left.> TiposConsumos
Administrador -down->"1" PasswordValidator
PasswordValidator --> "9" Validator
Validator <|-down- PasswordIsCommonValidator
PasswordIsCommonValidator -down->"1" FileHandler
Validator <|-down- PasswordHasOnlyLettersValidator
Validator <|-down- PasswordContainsUserValidator
Validator <|-down- PasswordHasOnlyNumbersAndLettersValidator
Validator <|-left- PasswordHasOnlyNumbersValidator
Validator <|-right- PasswordMaxLengthValidator
Validator <|-left- PasswordMinLengthValidator
Validator <|-right- PasswordNullValidator
Validator <|-down- PasswordMatchesInvalidCharactersValidator


Miembro "*"<-up- Sector
Organizacion -up-> TipoOrganizacion
Organizacion -right-> Clasificacion
Organizacion -down-> Ubicacion
Organizacion -up->"*" Sector
Miembro -up-> Documento

Trayecto --> "*" Tramo
Trayecto <-left- Miembro
Tramo --> Transporte
Tramo -right-> Ubicacion
Tramo -right-> Ubicacion

Transporte -right-> TipoTransporte
TransportePublico -left->"*" Parada
TransportePublico -right-> TipoDeTransportePublico
VehiculoParticular -down-> TipoDeVehiculo
ServicioContratado -down-> TipoDeServicioContratado
TransportePublico -up-|> Transporte
VehiculoParticular -up-|> Transporte
Pie -up-|> Transporte
Bicicleta -up-|> Transporte
ServicioContratado -up-|> Transporte

Transporte -up-> TipoConsumo

Organizacion ..> Trayecto
Tramo --> CalculadoraDeDistancia
CalculadoraDeDistanciaRetrofit .up.|> CalculadoraDeDistancia

Organizacion -down->"*" Medicion
Medicion --> TipoConsumo
Medicion -right-> Periodicidad

Parada --> ResultadoDistancia
Parada -up-> Ubicacion

note top of Organizaciones
  Ejecuta el envio de notificaciones de lunes a viernes a las 17hs con crontab
end note


@enduml