@startuml TPA-3

class Organizacion {
  razonSocial : String
  tipo : Tipo
  ubicacion : Ubicacion
  sectores : List<Sector>
  clasificacion : Clasificacion
  mediciones : List<Medicion>
  contactos : List<Contacto>
  bool tieneSectorDe(Sector)
  int cantidadDeSectores()
  int cantidadDeMiembros()
  bool esMiembro(Miembro miembro)
  List<Miembro> getMiembros()
  void verificarQueSeanMiembros(Miembro[])
  void asignarTrayectoA(Trayecto, List<Miembro>)
  void agregarMediciones()
  void agregarContacto(Contacto)
  boolean contieneMedicionIdentica(Medicion)
  Set<Trayecto> getTrayectos()
  int huellaDeCarbonoEnPeriodo(Periodicidad, String periodoDeImputacion)
  int impactoMiembroSobreHC(Miembro, Periodicidad, String periodoDeImputacion)
  int indiceSectorSobreHC(Sector, Periodicidad, String periodoDeImputacion)
}
' impactoMiembroSobreHC -> llamo a huellaDeCarbonoEnPeriodo, y calcularHuellaDeCarbono de Miembro, y divido el resultado para obtener el porcentaje 
' verificarQueSeanMiembros -> valida que en la lista de miembros todos pertenezcan a la organizacion
' asignarTrayectoA -> llama a verificarQueSeanMiembros para lista de miembros,
' y verificarQuePuedaSerAsignadoAMiembros para el trayecto, si pasan las validaciones,
' a todos los miembros de la lista se le asigna el trayecto

class Contacto {
  nombre : String
  eMail : String
  numeroDeWhatsapp : Integer
}

class Organizaciones {
  organizaciones : List<Organizacion>
  mediosDeComunicacion : List<MediosDeComunicacion>
}

Organizacion -up->"*" Contacto
Organizaciones -->"*" Organizacion
Organizaciones -up->"*" MediosDeComunicacion

interface MediosDeComunicacion {
  void enviarNotificacion() 
  ' Se ejecuta con tarea programada
}

class WhatsApp {
  
}

class Email {
  
}

MediosDeComunicacion <|-up- WhatsApp
MediosDeComunicacion <|-up- Email

class SectorTerritorial {
  organizaciones : List<Organizacion>
}

SectorTerritorial -->"*" Organizacion

class TiposConsumos {
  consumos : List<TipoConsumo>
}

' TiposConsumos.getInstance().getConsumos().get(0)
' TipoConsumo gasNatural = new TipoConsumo(
'   Actividad.COMBUSTION_FIJA,
'   Alcance.EMISION_DIRECTA,
'   Unidad.M3,
'   500
' );

' TiposConsumos es singleton (repositorio de objetos)
TiposConsumos -left->"*" TipoConsumo
TipoConsumo --> Actividad
TipoConsumo --> Alcance
TipoConsumo --> Unidad

class TipoConsumo {
  actividad : Actividad
  alcance : Alcance
  unidad : Unidad
  factorDeEmision : Double
}
' void setFactorDeEmision(double)

enum Actividad {
  COMBUSTION_FIJA,
  COMBUSTION_MOVIL,
  ELECTRICIDAD_ADQ_CONS,
  LOGISTICA_PROD_RESID,
}

enum Alcance {
  EMISIONES_DIRECTAS,
  EMISIONES_INDIRECTAS,
  OTRAS_EMISIONES,
}

enum Unidad {
  M3,
  LT,
  KGS,
  LTS,
  KWH,
  KM,
  SIN_UNIDAD,
}


class Medicion {
  tipoConsumo: TipoConsumo
  valor: Integer
  periodicidad: Periodicidad
  periodoDeImputacion: String
}
' periodicidad puede ser un String. Solo se usa en la validacion con periodoDeImputacion

enum Periodicidad {
  MENSUAL,
  ANUAL,
}
class Ubicacion {
  localidadId : Integer
  calle : string
  altura : string
}

class Sector {
  miembros : List<Miembro>
  int calcularHuellaDeCarbono(Periodicidad)
}

class Miembro {
  nombre : String
  apellido : String
  numeroDeDocumento : int
  tipoDeDocumento : Documento
  trayecto : Trayecto
  int calcularHuellaDeCarbono(Periodicidad)
}

enum Documento {
  DNI,
  LIBRETA,
}

enum Tipo {
  GUBERNAMENTAL,
  ONG,
  EMPRESA,
  INSTITUCION,
}

enum Clasificacion {
  MINISTERIO,
  UNIVERSIDAD,
  ESCUELA,
  EMPRESA_DEL_SECTOR_PRIMARIO,
  EMPRESA_DEL_SECTOR_SECUNDARIO,
}

' Usamos strategy para los medios de transportes
abstract Transporte {
  combustible : TipoConsumo
  combustiblePorKm : Double
  tipoTransporte : TipoTransporte
}

enum TipoTransporte {
  PUBLICO,
  PARTICULAR,
  CONTRATADO,
  BICICLETA,
  PIE,
}

class VehiculoParticular {
  tipoDeVehiculo : TipoDeVehiculo
}

class TransportePublico {
  tipoDeTransportePublico : TipoDeTransportePublico
  paradas : List<Parada>
  linea : String
  bool tieneUnaParadaEn(Ubicacion)
  void agregarParadaInicial(Parada)
  void agregarParadaLuegoDe(Parada, Ubicacion)
  void agregarParadaFinal(Parada, Ubicacion, ResultadoDistancia)
  boolean distanciaValida(Parada, Ubicacion)
  boolean tieneUnaParadaEn(Ubicacion)
  double calcularDistancia(Ubicacion, Ubicacion)
}

class ServicioContratado {
  tipoDeServicioContratado : TipoDeServicioContratado
}

' Se refiere a caminar o a bicicleta
class Pie {

}

class Bicicleta {

}


enum TipoDeTransportePublico {
  SUBTE,
  TREN,
  COLECTIVO,
}

enum TipoDeVehiculo {
  AUTO,
  MOTO,
  CAMIONETA,
}

enum TipoDeServicioContratado{
  TAXI,
  REMIS,
}

class Tramo {
  origenDeTramo : Ubicacion
  destinoDeTramo : Ubicacion
  transporteUtilizado : Transporte
  calculadoraDeDistancia : CalculadoraDeDistancia
  boolean puedeSerCompartido()
  double distanciaIntermedia()
}
' puedeSerCompartido -> valida que el tipo de transporte del tramo sea
' vehiculo particular o de servicio contratado

class Trayecto {
  tramos : List<Tramo>
  void verificarQuePuedaSerAsignadoAMiembros()
  double distanciaTotal()
}
' verificarQuePuedaSerAsignadoAMiembros -> llama para cada tramo al validarTramoCompartido

interface CalculadoraDeDistancia {
  double distancia(Ubicacion origen, Ubicacion destino)
}

class CalculadoraDeDistanciaRetrofit {

}

class ResultadoDistancia {
  double valor
  String unidad
  double obtenerMetros()
}

class Parada {
  Ubicacion ubicacion
  ResultadoDistancia distanciaSiguienteParada
  void modificarDistanciaSiguienteParada(Parada)
}

class Administrador {
  user : String
  password : String
  validador : PasswordValidator 
  void generarNuevoFactorDeEmision(Actividad, Alcance, Unidad, double factorDeEmision, String nombreTipoDeConsumo)
}

class PasswordValidator {
  List<Validator> : validadores
  void validarPassword(password, user)
  void ejecutarValidaciones()
}

class FileHandler {
  bool palabraEstaEnArchivo(unaPalabra)
}

abstract class Validator {
  password : String
  user : String
  abstract void ejecutarValidacion()
}

class PasswordMatchesInvalidCharactersValidator {
  void ejecutarValidacion()
}

class PasswordIsCommonValidator {
  fileReader : FileHandler
  void ejecutarValidacion()
}

class PasswordHasOnlyLettersValidator {
  void ejecutarValidacion()
}

class PasswordContainsUserValidator {
  void ejecutarValidacion()
}


class PasswordHasOnlyNumbersAndLettersValidator {
  void ejecutarValidacion()
}

class PasswordHasOnlyNumbersValidator {
  void ejecutarValidacion()
}

class PasswordMaxLengthValidator {
  void ejecutarValidacion()
}

class PasswordMinLengthValidator {
  void ejecutarValidacion()
}

class PasswordNullValidator {
  void ejecutarValidacion()
}

class CsvHandler {
  List<Medicion> getMediciones()
}

Administrador .left.> TiposConsumos
Administrador -down->"1" PasswordValidator
PasswordValidator --> "9" Validator
Validator <|-down- PasswordIsCommonValidator
PasswordIsCommonValidator -down->"1" FileHandler
Validator <|-down- PasswordHasOnlyLettersValidator
Validator <|-down- PasswordContainsUserValidator
Validator <|-down- PasswordHasOnlyNumbersAndLettersValidator
Validator <|-left- PasswordHasOnlyNumbersValidator
Validator <|-right- PasswordMaxLengthValidator
Validator <|-left- PasswordMinLengthValidator
Validator <|-right- PasswordNullValidator
Validator <|-down- PasswordMatchesInvalidCharactersValidator


Miembro "*"<-up- Sector
Organizacion -up-> Tipo
Organizacion -up-> Clasificacion
Organizacion -down-> Ubicacion
Organizacion -up->"*" Sector
Miembro -up-> Documento

Trayecto --> "*" Tramo
Trayecto <-left- Miembro
Tramo --> Transporte
Tramo -right-> Ubicacion
Tramo -right-> Ubicacion

Transporte -right-> TipoTransporte
TransportePublico -left->"*" Parada
TransportePublico -right-> TipoDeTransportePublico
VehiculoParticular -down-> TipoDeVehiculo
ServicioContratado -down-> TipoDeServicioContratado
TransportePublico -up-|> Transporte
VehiculoParticular -up-|> Transporte
Pie -up-|> Transporte
Bicicleta -up-|> Transporte
ServicioContratado -up-|> Transporte

Transporte -up-> TipoConsumo

Organizacion ..> Trayecto
Tramo --> CalculadoraDeDistancia
CalculadoraDeDistanciaRetrofit .up.|> CalculadoraDeDistancia
' CalculadoraDeDistancia ..> Ubicacion
' CalculadoraDeDistancia ..> Ubicacion
' Al poner el tipo de los parametros no hace falta agregar una relacion

Organizacion -right-> Medicion
Medicion --> TipoConsumo
Medicion -right-> Periodicidad

Parada --> ResultadoDistancia
Parada -up-> Ubicacion



@enduml