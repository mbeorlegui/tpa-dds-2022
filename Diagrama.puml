@startuml TPA-2

class Organizacion {
  razonSocial : String
  tipo : Tipo
  ubicacion : Ubicacion
  sectores : List<Sector>
  clasificacion : Clasificacion
  mediciones : List<Medicion>
  bool tieneSectorDe(Sector)
  int cantidadDeSectores()
  int cantidadDeMiembros()
  bool esMiembro(Miembro miembro)
  List<Miembro> getMiembros()
  void verificarQueSeanMiembros(Miembro[])
  void asignarTrayectoA(Trayecto, List<Miembro>)
  void agregarMediciones()
  boolean contieneMedicionIdentica(Medicion)
}
' verificarQueSeanMiembros -> valida que en la lista de miembros todos pertenezcan a la organizacion
' asignarTrayectoA -> llama a verificarQueSeanMiembros para lista de miembros,
' y verificarQuePuedaSerAsignadoAMiembros para el trayecto, si pasan las validaciones,
' a todos los miembros de la lista se le asigna el trayecto

enum TipoConsumo {
  GAS_NATURAL,
  DIESEL_GASOIL,
  NAFTA,
  CARBON,
  CC_GASOIL,
  CC_NAFTA,
  ELECTRICIDAD,
  MEDIO_DE_TRANSPORTE,
  DISTANCIA_MEDIA_RECORRIDA,
}


class Medicion {
  tipoConsumo: TipoConsumo
  valor: Integer
  periodicidad: Periodicidad
  periodoDeImputacion: String
}
' periodicidad puede ser un String. Solo se usa en la validacion con periodoDeImputacion

enum Periodicidad {
  MENSUAL,
  ANUAL,
}
class Ubicacion {
  localidadId : integer
  calle : string
  altura : string
}

class Sector {
  miembros : List<Miembro>
}

class Miembro {
  nombre : String
  apellido : String
  numeroDeDocumento : int
  tipoDeDocumento : Documento
  trayecto : Trayecto
}

enum Documento {
  DNI,
  LIBRETA,
}

enum Tipo {
  GUBERNAMENTAL,
  ONG,
  EMPRESA,
  INSTITUCION,
}

enum Clasificacion {
  MINISTERIO,
  UNIVERSIDAD,
  ESCUELA,
  EMPRESA_DEL_SECTOR_PRIMARIO,
  EMPRESA_DEL_SECTOR_SECUNDARIO,
}

' Usamos strategy para los medios de transportes
interface Transporte {
  tipoTransporte : TipoTransporte
}

enum TipoTransporte {
  PUBLICO,
  PARTICULAR,
  CONTRATADO,
  BICICLETA,
  PIE,
}

class VehiculoParticular {
  tipoDeVehiculo : TipoDeVehiculo
  combustible : Combustible
}

class TransportePublico {
  tipoDeTransportePublico : TipoDeTransportePublico
  paradas : List<Ubicacion>
  linea : String
  bool tieneUnaParadaEn(Ubicacion)
}

class ServicioContratado {
  tipoDeServicioContratado : TipoDeServicioContratado
}

' Se refiere a caminar o a bicicleta
class Pie {

}

class Bicicleta {

}


enum TipoDeTransportePublico {
  SUBTE,
  TREN,
  COLECTIVO,
}

enum TipoDeVehiculo {
  AUTO,
  MOTO,
  CAMIONETA,
}

enum TipoDeServicioContratado{
  TAXI,
  REMIS,
}

enum Combustible {
  GNC,
  NAFTA,
  ELECTRICO,
  GASOIL,
}

class Tramo {
  origenDeTramo : Ubicacion
  destinoDeTramo : Ubicacion
  transporteUtilizado : Transporte
  calculadoraDeDistancia : AdapterCalculadoraDeDistancia
  boolean puedeSerCompartido()
  double distanciaIntermedia()
}
' puedeSerCompartido -> valida que el tipo de transporte del tramo sea
' vehiculo particular o de servicio contratado

class Trayecto {
  tramos : List<Tramo>
  void verificarQuePuedaSerAsignadoAMiembros()
  double distanciaTotal()
}
' verificarQuePuedaSerAsignadoAMiembros -> llama para cada tramo al validarTramoCompartido

interface AdapterCalculadoraDeDistancia {
  double distancia(Ubicacion origen, Ubicacion destino)
}

class AdapterCalculadoraDeDistanciaRetrofit {

}

class Administrador {
  user : String
  password : String
  validador : PasswordValidator 
  FactorDeEmision generarNuevoFactorDeEmision(factor, tipoFactor)
}

class PasswordValidator {
  List<Validator> : validadores
  void validarPassword(password, user)
  void ejecutarValidaciones()
}

class FileHandler {
  bool palabraEstaEnArchivo(unaPalabra)
}

abstract class Validator {
  password : String
  user : String
  abstract void ejecutarValidacion()
}

class PasswordMatchesInvalidCharactersValidator {
  void ejecutarValidacion()
}

class PasswordIsCommonValidator {
  fileReader : FileHandler
  void ejecutarValidacion()
}

class PasswordHasOnlyLettersValidator {
  void ejecutarValidacion()
}

class PasswordContainsUserValidator {
  void ejecutarValidacion()
}


class PasswordHasOnlyNumbersAndLettersValidator {
  void ejecutarValidacion()
}

class PasswordHasOnlyNumbersValidator {
  void ejecutarValidacion()
}

class PasswordMaxLengthValidator {
  void ejecutarValidacion()
}

class PasswordMinLengthValidator {
  void ejecutarValidacion()
}

class PasswordNullValidator {
  void ejecutarValidacion()
}

class CsvHandler {
  List<Medicion> getMediciones()
}

class FactorDeEmision {
  factor : Integer
  tipoConsumo : TipoConsumo
}


Administrador -down->"1" PasswordValidator
PasswordValidator --> "9" Validator
Validator <|-down- PasswordIsCommonValidator
PasswordIsCommonValidator -down->"1" FileHandler
Validator <|-down- PasswordHasOnlyLettersValidator
Validator <|-down- PasswordContainsUserValidator
Validator <|-down- PasswordHasOnlyNumbersAndLettersValidator
Validator <|-left- PasswordHasOnlyNumbersValidator
Validator <|-right- PasswordMaxLengthValidator
Validator <|-left- PasswordMinLengthValidator
Validator <|-right- PasswordNullValidator
Validator <|-down- PasswordMatchesInvalidCharactersValidator


Miembro "*"<-up- Sector
Organizacion -up-> Tipo
Organizacion -up-> Clasificacion
Organizacion --> Ubicacion
Organizacion -left->"*" Sector
Miembro -up-> Documento

Trayecto --> "*" Tramo
Trayecto <-left- Miembro
Tramo --> Transporte
Tramo -right-> Ubicacion

Transporte -up-> TipoTransporte
TransportePublico -up->"*" Ubicacion
TransportePublico --> TipoDeTransportePublico
VehiculoParticular -down-> TipoDeVehiculo
VehiculoParticular -up-> Combustible
ServicioContratado -down-> TipoDeServicioContratado
TransportePublico .up.|> Transporte
VehiculoParticular .up.|> Transporte
Pie .up.|> Transporte
Bicicleta .up.|> Transporte
ServicioContratado .up.|> Transporte


Organizacion ..> Trayecto
Tramo --> AdapterCalculadoraDeDistancia
AdapterCalculadoraDeDistanciaRetrofit -up-|> AdapterCalculadoraDeDistancia
AdapterCalculadoraDeDistancia ..> Ubicacion


Organizacion -right-> Medicion
Medicion --> TipoConsumo
Medicion --> Periodicidad

Administrador .down.> FactorDeEmision
FactorDeEmision --> TipoConsumo

@enduml